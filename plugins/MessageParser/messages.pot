# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR ORGANIZATION
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-11-26 23:54+CET\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"
"Generated-By: pygettext.py 1.5\n"


#: config.py:57
msgid ""
"Determines whether the\n"
"    message parser is enabled.  If enabled, will trigger on regexps\n"
"    added to the regexp db."
msgstr ""

#: config.py:61
msgid ""
"Determines whether the message parser\n"
"    is enabled for NOTICE messages too."
msgstr ""

#: config.py:64
msgid ""
"Determines whether we keep updating the usage\n"
"    count for each regexp, for popularity ranking."
msgstr ""

#: config.py:67
msgid ""
"Determines the number of regexps returned\n"
"    by the triggerrank command."
msgstr ""

#: config.py:70
msgid ""
"Determines the capability required (if any) to\n"
"    vacuum the database."
msgstr ""

#: config.py:73
msgid ""
"Determines the\n"
"    capabilities required (if any) to manage the regexp database,\n"
"    including add, remove, lock, unlock. Use 'channel,capab' for\n"
"    channel-level capabilities.\n"
"    Note that absence of an explicit anticapability means user has\n"
"    capability."
msgstr ""

#: config.py:80
msgid ""
"Determines the separator used between regexps when\n"
"    shown by the list command."
msgstr ""

#: config.py:83
msgid ""
"Determines the maximum number of triggers in\n"
"    one message. Set this to 0 to allow an infinite number of triggers."
msgstr ""

#: plugin.py:72
#, docstring
msgid ""
"This plugin can set regexp triggers to activate the bot.\n"
"    Use 'add' command to add regexp trigger, 'remove' to remove."
msgstr ""

#: plugin.py:80
#, docstring
msgid "Create the database and connect to it."
msgstr ""

#: plugin.py:103
#, docstring
msgid "Use this to get a database for a specific channel."
msgstr ""

#: plugin.py:127
#, docstring
msgid "Run a command from message, as if command was sent over IRC."
msgstr ""

#: plugin.py:135
#, docstring
msgid ""
"Check if the user has any of the required capabilities to manage\n"
"        the regexp database."
msgstr ""

#: plugin.py:195
#, docstring
msgid ""
"[<channel>|global] <regexp> <action>\n"
"\n"
"        Associates <regexp> with <action>.  <channel> is only\n"
"        necessary if the message isn't sent on the channel\n"
"        itself.  Action is echoed upon regexp match, with variables $1, $2,\n"
"        etc. being interpolated from the regexp match groups."
msgstr ""

#: plugin.py:217
msgid "Invalid python regexp: %s"
msgstr ""

#: plugin.py:229
msgid "That trigger is locked."
msgstr ""

#: plugin.py:235
#, docstring
msgid ""
"[<channel>|global] [--id] <regexp>]\n"
"\n"
"        Removes the trigger for <regexp> from the triggers database.\n"
"        <channel> is only necessary if\n"
"        the message isn't sent in the channel itself.\n"
"        If option --id specified, will retrieve by regexp id, not content.\n"
"        "
msgstr ""

#: plugin.py:257 plugin.py:287 plugin.py:310 plugin.py:338 plugin.py:368
msgid "There is no such regexp trigger."
msgstr ""

#: plugin.py:261
msgid "This regexp trigger is locked."
msgstr ""

#: plugin.py:273
#, docstring
msgid ""
"[<channel>|global] <regexp>\n"
"\n"
"        Locks the <regexp> so that it cannot be\n"
"        removed or overwritten to.  <channel> is only necessary if the message isn't\n"
"        sent in the channel itself.\n"
"        "
msgstr ""

#: plugin.py:296
#, docstring
msgid ""
"[<channel>|global] <regexp>\n"
"\n"
"        Unlocks the entry associated with <regexp> so that it can be\n"
"        removed or overwritten.  <channel> is only necessary if the message isn't\n"
"        sent in the channel itself.\n"
"        "
msgstr ""

#: plugin.py:319
#, docstring
msgid ""
"[<channel>|global] [--id] <regexp>\n"
"\n"
"        Looks up the value of <regexp> in the triggers database.\n"
"        <channel> is only necessary if the message isn't sent in the channel\n"
"        itself.\n"
"        If option --id specified, will retrieve by regexp id, not content.\n"
"        "
msgstr ""

#: plugin.py:348
#, docstring
msgid ""
"[<channel>|global] [--id] <regexp>\n"
"\n"
"        Display information about <regexp> in the triggers database.\n"
"        <channel> is only necessary if the message isn't sent in the channel\n"
"        itself.\n"
"        If option --id specified, will retrieve by regexp id, not content.\n"
"        "
msgstr ""

#: plugin.py:371
msgid "The regexp id is %d, regexp is \"%s\", and action is \"%s\". It was added by user %s on %s, has been triggered %d times, and is %s."
msgstr ""

#: plugin.py:380
msgid "locked"
msgstr ""

#: plugin.py:380
msgid "not locked"
msgstr ""

#: plugin.py:387
#, docstring
msgid ""
"[<channel>|global]\n"
"\n"
"        Lists regexps present in the triggers database.\n"
"        <channel> is only necessary if the message isn't sent in the channel\n"
"        itself. Regexp ID listed in parentheses.\n"
"        "
msgstr ""

#: plugin.py:400 plugin.py:426
msgid "There are no regexp triggers in the database."
msgstr ""

#: plugin.py:410
#, docstring
msgid ""
"[<channel>|global]\n"
"\n"
"        Returns a list of top-ranked regexps, sorted by usage count\n"
"        (rank). The number of regexps returned is set by the\n"
"        rankListLength registry value. <channel> is only necessary if the\n"
"        message isn't sent in the channel itself.\n"
"        "
msgstr ""

#: plugin.py:434
#, docstring
msgid ""
"[<channel>|global]\n"
"\n"
"        Vacuums the database for <channel>.\n"
"        See SQLite vacuum doc here: http://www.sqlite.org/lang_vacuum.html\n"
"        <channel> is only necessary if the message isn't sent in\n"
"        the channel itself.\n"
"        First check if user has the required capability specified in plugin\n"
"        config requireVacuumCapability.\n"
"        "
msgstr ""

